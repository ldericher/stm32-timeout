#ifndef LIB_AVR_TIMEOUT_SRC_TIMEOUT_MILLI_H_
#define LIB_AVR_TIMEOUT_SRC_TIMEOUT_MILLI_H_

// lib includes
#include <avr/interrupt.h>

// local includes
#include "timeout.h"

// parent includes
#include "../timer/milli.h"

namespace timer {
class Milli;
}

namespace timeout {

/**
 * @brief triggers after a set amount of milliseconds, uses TIMER2
 */
class Milli : public Timeout {
 private:
  /// true if and only if TIMER2 has been initialized
  static bool hw_initialized_;

  /// the first object of this class
  static Timeout* first_;

  /// the TIMER2 interrupt
  static CPP_CLASS_MEMBER_ISR(TickTimers_ms, TIMER2_COMPA_vect);

  /// initialize TIMER2
  static void InitHardware();

  // allow timer::Milli to call InitHardware
  friend class timer::Milli;

 public:
  /**
   * @brief Construct a new Milli object
   */
  Milli();

  /**
   * @brief Start TIMER2 interrupt
   */
  static void StartHardware();

  /**
   * @brief Stop TIMER2 interrupt
   */
  static void StopHardware();
};

}  // namespace timeout

#endif /* LIB_AVR_TIMEOUT_SRC_TIMEOUT_MILLI_H_ */
